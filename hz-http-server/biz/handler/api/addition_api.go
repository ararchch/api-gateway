// Code generated by hertz generator.

package api

import (
	"context"
	"encoding/json"
	"fmt"

	api "github.com/ararchch/api-gateway/hz-http-server/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"github.com/ararchch/api-gateway/kitex-rpc-server/kitex_gen/addition/management"
	kitexClient "github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	etcd "github.com/kitex-contrib/registry-etcd"
)


// AddNumbers .
// @router /add [POST]
func AddNumbers(ctx context.Context, c *app.RequestContext) {

	var err error
	var req api.AdditionRequest

	r, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
	if err != nil {
		panic(err)
	}

	p, err := generic.NewThriftFileProvider("../thrift-idl/gateway_api.thrift")
	if err != nil {
		panic(err)
	}

	g, err := generic.JSONThriftGeneric(p)
	if err != nil {
		panic(err)
	}

	client, err := genericclient.NewClient("AdditionApi", g, kitexClient.WithResolver(r))
	if err != nil {
		panic(err)
	}

	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	reqRpc := &management.AdditionRequest{
		FirstNum:  req.FirstNum,
		SecondNum: req.SecondNum,
	}

	jsonbody, err := json.Marshal(reqRpc)
	if err != nil {
		panic(err)
	}
	jsonString := string(jsonbody)

	fmt.Print(jsonString)

	respRpc, err := client.GenericCall(ctx, "addNumbers", jsonString)
	if err != nil {
		fmt.Print("HELLOOOOO")
		fmt.Print(respRpc)
		panic(err)
	}

	fmt.Printf("%s <---------------------------", respRpc)

	// respRpc, err := client.AddNumbers(ctx, reqRpc)
	// if err != nil {
	// 	panic(err)
	// }


	result := api.AdditionResponse{
		Sum: fmt.Sprint(respRpc),
	}

	c.JSON(consts.StatusOK, result)
}
