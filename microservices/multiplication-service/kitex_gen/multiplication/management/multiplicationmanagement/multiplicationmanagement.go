// Code generated by Kitex v0.6.1. DO NOT EDIT.

package multiplicationmanagement

import (
	"context"
	management "github.com/ararchch/api-gateway/microservices/multiplication-service/kitex_gen/multiplication/management"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return multiplicationManagementServiceInfo
}

var multiplicationManagementServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MultiplicationManagement"
	handlerType := (*management.MultiplicationManagement)(nil)
	methods := map[string]kitex.MethodInfo{
		"multiplyNumbers": kitex.NewMethodInfo(multiplyNumbersHandler, newMultiplicationManagementMultiplyNumbersArgs, newMultiplicationManagementMultiplyNumbersResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "management",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func multiplyNumbersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*management.MultiplicationManagementMultiplyNumbersArgs)
	realResult := result.(*management.MultiplicationManagementMultiplyNumbersResult)
	success, err := handler.(management.MultiplicationManagement).MultiplyNumbers(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMultiplicationManagementMultiplyNumbersArgs() interface{} {
	return management.NewMultiplicationManagementMultiplyNumbersArgs()
}

func newMultiplicationManagementMultiplyNumbersResult() interface{} {
	return management.NewMultiplicationManagementMultiplyNumbersResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MultiplyNumbers(ctx context.Context, req *management.MultiplicationRequest) (r *management.MultiplicationResponse, err error) {
	var _args management.MultiplicationManagementMultiplyNumbersArgs
	_args.Req = req
	var _result management.MultiplicationManagementMultiplyNumbersResult
	if err = p.c.Call(ctx, "multiplyNumbers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
