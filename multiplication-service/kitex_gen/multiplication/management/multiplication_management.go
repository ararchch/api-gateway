// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package management

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type MultiplicationRequest struct {
	FirstNum  string `thrift:"FirstNum,1,required" frugal:"1,required,string" json:"FirstNum"`
	SecondNum string `thrift:"SecondNum,2,required" frugal:"2,required,string" json:"SecondNum"`
}

func NewMultiplicationRequest() *MultiplicationRequest {
	return &MultiplicationRequest{}
}

func (p *MultiplicationRequest) InitDefault() {
	*p = MultiplicationRequest{}
}

func (p *MultiplicationRequest) GetFirstNum() (v string) {
	return p.FirstNum
}

func (p *MultiplicationRequest) GetSecondNum() (v string) {
	return p.SecondNum
}
func (p *MultiplicationRequest) SetFirstNum(val string) {
	p.FirstNum = val
}
func (p *MultiplicationRequest) SetSecondNum(val string) {
	p.SecondNum = val
}

var fieldIDToName_MultiplicationRequest = map[int16]string{
	1: "FirstNum",
	2: "SecondNum",
}

func (p *MultiplicationRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFirstNum bool = false
	var issetSecondNum bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFirstNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSecondNum = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFirstNum {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSecondNum {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MultiplicationRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_MultiplicationRequest[fieldId]))
}

func (p *MultiplicationRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FirstNum = v
	}
	return nil
}

func (p *MultiplicationRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.SecondNum = v
	}
	return nil
}

func (p *MultiplicationRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MultiplicationRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MultiplicationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("FirstNum", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FirstNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MultiplicationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("SecondNum", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SecondNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MultiplicationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiplicationRequest(%+v)", *p)
}

func (p *MultiplicationRequest) DeepEqual(ano *MultiplicationRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FirstNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.SecondNum) {
		return false
	}
	return true
}

func (p *MultiplicationRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.FirstNum, src) != 0 {
		return false
	}
	return true
}
func (p *MultiplicationRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SecondNum, src) != 0 {
		return false
	}
	return true
}

type MultiplicationResponse struct {
	Product string `thrift:"Product,1" frugal:"1,default,string" json:"Product"`
}

func NewMultiplicationResponse() *MultiplicationResponse {
	return &MultiplicationResponse{}
}

func (p *MultiplicationResponse) InitDefault() {
	*p = MultiplicationResponse{}
}

func (p *MultiplicationResponse) GetProduct() (v string) {
	return p.Product
}
func (p *MultiplicationResponse) SetProduct(val string) {
	p.Product = val
}

var fieldIDToName_MultiplicationResponse = map[int16]string{
	1: "Product",
}

func (p *MultiplicationResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MultiplicationResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MultiplicationResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Product = v
	}
	return nil
}

func (p *MultiplicationResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MultiplicationResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MultiplicationResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Product", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Product); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MultiplicationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiplicationResponse(%+v)", *p)
}

func (p *MultiplicationResponse) DeepEqual(ano *MultiplicationResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Product) {
		return false
	}
	return true
}

func (p *MultiplicationResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Product, src) != 0 {
		return false
	}
	return true
}

type MultiplicationManagement interface {
	MultiplyNumbers(ctx context.Context, req *MultiplicationRequest) (r *MultiplicationResponse, err error)
}

type MultiplicationManagementClient struct {
	c thrift.TClient
}

func NewMultiplicationManagementClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MultiplicationManagementClient {
	return &MultiplicationManagementClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMultiplicationManagementClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MultiplicationManagementClient {
	return &MultiplicationManagementClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMultiplicationManagementClient(c thrift.TClient) *MultiplicationManagementClient {
	return &MultiplicationManagementClient{
		c: c,
	}
}

func (p *MultiplicationManagementClient) Client_() thrift.TClient {
	return p.c
}

func (p *MultiplicationManagementClient) MultiplyNumbers(ctx context.Context, req *MultiplicationRequest) (r *MultiplicationResponse, err error) {
	var _args MultiplicationManagementMultiplyNumbersArgs
	_args.Req = req
	var _result MultiplicationManagementMultiplyNumbersResult
	if err = p.Client_().Call(ctx, "multiplyNumbers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MultiplicationManagementProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MultiplicationManagement
}

func (p *MultiplicationManagementProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MultiplicationManagementProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MultiplicationManagementProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMultiplicationManagementProcessor(handler MultiplicationManagement) *MultiplicationManagementProcessor {
	self := &MultiplicationManagementProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("multiplyNumbers", &multiplicationManagementProcessorMultiplyNumbers{handler: handler})
	return self
}
func (p *MultiplicationManagementProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type multiplicationManagementProcessorMultiplyNumbers struct {
	handler MultiplicationManagement
}

func (p *multiplicationManagementProcessorMultiplyNumbers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MultiplicationManagementMultiplyNumbersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("multiplyNumbers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MultiplicationManagementMultiplyNumbersResult{}
	var retval *MultiplicationResponse
	if retval, err2 = p.handler.MultiplyNumbers(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiplyNumbers: "+err2.Error())
		oprot.WriteMessageBegin("multiplyNumbers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("multiplyNumbers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MultiplicationManagementMultiplyNumbersArgs struct {
	Req *MultiplicationRequest `thrift:"req,1" frugal:"1,default,MultiplicationRequest" json:"req"`
}

func NewMultiplicationManagementMultiplyNumbersArgs() *MultiplicationManagementMultiplyNumbersArgs {
	return &MultiplicationManagementMultiplyNumbersArgs{}
}

func (p *MultiplicationManagementMultiplyNumbersArgs) InitDefault() {
	*p = MultiplicationManagementMultiplyNumbersArgs{}
}

var MultiplicationManagementMultiplyNumbersArgs_Req_DEFAULT *MultiplicationRequest

func (p *MultiplicationManagementMultiplyNumbersArgs) GetReq() (v *MultiplicationRequest) {
	if !p.IsSetReq() {
		return MultiplicationManagementMultiplyNumbersArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MultiplicationManagementMultiplyNumbersArgs) SetReq(val *MultiplicationRequest) {
	p.Req = val
}

var fieldIDToName_MultiplicationManagementMultiplyNumbersArgs = map[int16]string{
	1: "req",
}

func (p *MultiplicationManagementMultiplyNumbersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MultiplicationManagementMultiplyNumbersArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MultiplicationManagementMultiplyNumbersArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MultiplicationManagementMultiplyNumbersArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewMultiplicationRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MultiplicationManagementMultiplyNumbersArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("multiplyNumbers_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MultiplicationManagementMultiplyNumbersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MultiplicationManagementMultiplyNumbersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiplicationManagementMultiplyNumbersArgs(%+v)", *p)
}

func (p *MultiplicationManagementMultiplyNumbersArgs) DeepEqual(ano *MultiplicationManagementMultiplyNumbersArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MultiplicationManagementMultiplyNumbersArgs) Field1DeepEqual(src *MultiplicationRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MultiplicationManagementMultiplyNumbersResult struct {
	Success *MultiplicationResponse `thrift:"success,0,optional" frugal:"0,optional,MultiplicationResponse" json:"success,omitempty"`
}

func NewMultiplicationManagementMultiplyNumbersResult() *MultiplicationManagementMultiplyNumbersResult {
	return &MultiplicationManagementMultiplyNumbersResult{}
}

func (p *MultiplicationManagementMultiplyNumbersResult) InitDefault() {
	*p = MultiplicationManagementMultiplyNumbersResult{}
}

var MultiplicationManagementMultiplyNumbersResult_Success_DEFAULT *MultiplicationResponse

func (p *MultiplicationManagementMultiplyNumbersResult) GetSuccess() (v *MultiplicationResponse) {
	if !p.IsSetSuccess() {
		return MultiplicationManagementMultiplyNumbersResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MultiplicationManagementMultiplyNumbersResult) SetSuccess(x interface{}) {
	p.Success = x.(*MultiplicationResponse)
}

var fieldIDToName_MultiplicationManagementMultiplyNumbersResult = map[int16]string{
	0: "success",
}

func (p *MultiplicationManagementMultiplyNumbersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MultiplicationManagementMultiplyNumbersResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MultiplicationManagementMultiplyNumbersResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MultiplicationManagementMultiplyNumbersResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewMultiplicationResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MultiplicationManagementMultiplyNumbersResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("multiplyNumbers_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MultiplicationManagementMultiplyNumbersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MultiplicationManagementMultiplyNumbersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiplicationManagementMultiplyNumbersResult(%+v)", *p)
}

func (p *MultiplicationManagementMultiplyNumbersResult) DeepEqual(ano *MultiplicationManagementMultiplyNumbersResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MultiplicationManagementMultiplyNumbersResult) Field0DeepEqual(src *MultiplicationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
