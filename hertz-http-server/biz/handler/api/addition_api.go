// Code generated by hertz generator.

package api

import (
	"context"
	"encoding/json"

	"github.com/ararchch/api-gateway/addition-service/kitex_gen/addition/management"
	api "github.com/ararchch/api-gateway/hertz-http-server/biz/model/api"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/loadbalance"
	etcd "github.com/kitex-contrib/registry-etcd"
	kitexClient "github.com/cloudwego/kitex/client"
)

// AddNumbers .
// @router /add [POST]
func AddNumbers(ctx context.Context, c *app.RequestContext) {

	// inital declarations
	var err error
	var req api.AdditionRequest

	// initating loadbalancer
	lb := loadbalance.NewWeightedBalancer()

	// initating etcs resolver (for service discovery)
	r, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
	if err != nil {
		panic(err)
	}

	// importing idl for reference(generic call)
	p, err := generic.NewThriftFileProvider("../thrift-idl/gateway_api.thrift")
	if err != nil {
		panic(err)
	}

	// convert to thrift generic form
	g, err := generic.JSONThriftGeneric(p)
	if err != nil {
		panic(err)
	}

	// create new generic client
	client, err := genericclient.NewClient(
		"Addition", 
		g, 
		kitexClient.WithResolver(r), 
		kitexClient.WithLoadBalancer(lb),
	)
	if err != nil {
		panic(err)
	}

	// bind error params to req
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// binding req params to kitex req format
	reqRpc := &management.AdditionRequest{
		FirstNum:  req.FirstNum,
		SecondNum: req.SecondNum,
	}

	// convert to request struct to JSON format (so it can be converted to json string)
	jsonForm, err := json.Marshal(reqRpc)
	if err != nil {
		panic(err)
	}

	// making generic call to addNumbers method of client
	respRpc, err := client.GenericCall(ctx, "addNumbers", string(jsonForm))
	if err != nil {
		panic(err)
	}

	// initating new AdditionResponse
	var resp api.AdditionResponse

	// unmarshal json string to AdditionResponse format
	json.Unmarshal([]byte(respRpc.(string)), &resp)

	// return to client as JSON response
	c.JSON(consts.StatusOK, resp)
}
