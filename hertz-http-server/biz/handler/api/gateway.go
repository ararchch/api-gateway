// Code generated by hertz generator.

package api

import (
	"context"

	additionService "github.com/ararchch/api-gateway/addition-service/kitex_gen/addition/management"
	multiplicationService "github.com/ararchch/api-gateway/multiplication-service/kitex_gen/multiplication/management"
	api "github.com/ararchch/api-gateway/hertz-http-server/biz/model/api"
	"github.com/ararchch/api-gateway/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// AddNumbers .
// @router /add [POST]
func AddNumbers(ctx context.Context, c *app.RequestContext) {
	
	// inital declarations (pre-generated)
	var err error
	var req api.AdditionRequest
	
	// bind error params to req (pre-generated)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// create new client (with loadbalancing, service discovery capabilities) using utils.GenerateClient feature
	additionClient, err := utils.GenerateClient("Addition")
	if err != nil {
		panic(err)
	}

	// binding req params to RPC reqest struct (following the request format declared in RPC service IDL)
	reqRpc := &additionService.AdditionRequest{
		FirstNum:  req.FirstNum,
		SecondNum: req.SecondNum,
	}

	// initate new RPC response struct (as declared in RPC service IDL). This response variable will be populated by MakeRpcRequst function
	var respRpc additionService.AdditionResponse

	// calling MakeRpcRequest method declared in the utils package
	err = utils.MakeRpcRequest(ctx, additionClient, "addNumbers", reqRpc, &respRpc)
	if err != nil {
		panic(err)
	}

	// initating and repackaging RPC response into new HTTP AdditionResponse
	resp := &api.AdditionResponse{
		Sum: respRpc.Sum,
	}

	// return to client as JSON HTTP response
	c.JSON(consts.StatusOK, resp)
}

// MultiplyNumbers .
// @router /multiply [POST]
func MultiplyNumbers(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.MultiplicationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// create new client (with loadbalancing, service discovery capabilities) using utils.GenerateClient feature
	multiplicationClient, err := utils.GenerateClient("Multiplication")
	if err != nil {
		panic(err)
	}

	// binding req params to RPC reqest struct (following the request format declared in RPC service IDL)
	reqRpc := &multiplicationService.MultiplicationRequest{
		FirstNum:  req.FirstNum,
		SecondNum: req.SecondNum,
	}

	// initate new RPC response struct (as declared in RPC service IDL). This response variable will be populated by MakeRpcRequst function
	var respRpc multiplicationService.MultiplicationResponse

	// calling MakeRpcRequest method declared in the utils package
	err = utils.MakeRpcRequest(ctx, multiplicationClient, "multiplyNumbers", reqRpc, &respRpc)
	if err != nil {
		panic(err)
	}

	// initating and repackaging RPC response into new HTTP AdditionResponse
	resp := &api.MultiplicationResponse{
		Product: respRpc.Product,
	}

	// return to client as JSON HTTP response
	c.JSON(consts.StatusOK, resp)
}
